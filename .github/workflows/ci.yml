name: Build & Test
"on":
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"
  schedule:
    - cron: 01 13 * * SAT
jobs:
  build:
    name: Build & Test
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@cbb722410c2e876e24abbe8de2cc27693e501dcb
      - uses: actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a
        with:
          go-version: stable
      - uses: cue-lang/setup-cue@a93fa358375740cd8b0078f76355512b9208acb1 # v1.0.1
      - uses: golangci/golangci-lint-action@971e284b6050e8a5849b72094c50ab08da042db8 # v6.1.1
        with:
          version: latest
          args: --timeout=3m --verbose
      - name: Install Tools
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          go install mvdan.cc/gofumpt@latest
          go install github.com/segmentio/golines@latest
          go install github.com/incu6us/goimports-reviser/v3@latest
      - name: Set GOVERSION environment variable (Linux/macOS)
        if: runner.os != 'Windows'
        run: echo "GOVERSION=$(go version)" >> $GITHUB_ENV
      - name: Set GOVERSION environment variable (Windows)
        if: runner.os == 'Windows'
        run: echo "GOVERSION=$(go version)" | Out-File -FilePath $env:GITHUB_ENV -Append
      - name: Build and Test
        run: |
          make build
          make test
      - name: Run GoReleaser
        if: runner.os == 'Linux'
        uses: goreleaser/goreleaser-action@d28c98212f8e972575198214e0c3f2dbca157dc5
        with:
          args: release --snapshot --skip=publish --clean
      - name: Colored Output Test
        if: runner.os == 'Linux'
        shell: script -q -e -c "bash {0}"
        run: go run main.go -- main.go
  required-check:
    name: All Tests Passed
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - run: echo "All tests passed!"
